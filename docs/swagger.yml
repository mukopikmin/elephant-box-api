---
swagger: '2.0'
info:
  description: 'This is a sample server Petstore server.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key `special-key` to test the authorization     filters.'
  version: 1.0.0
  title: Refrii API
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: api.refrii.com
basePath: "/v1"
tags:
- name: Authentication
- name: Boxes
- name: Foods
- name: Units
- name: Users
schemes:
- https
- http
produces:
- application/json
- image/*
consumes:
- application/x-www-form-urlencoded
- multipart/form-data
definitions:
  Invitation:
    type: object
    additionalProperties: false
    properties:
      id:
        type: integer
      box_id:
        type: integer
      user_id:
        type: integer
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
    required:
    - id
    - box_id
    - user_id
    - created_at
    - updated_at
  Box:
    type: object
    additionalProperties: false
    properties:
      id:
        type: integer
      name:
        type: string
      notice:
        type: string
      is_invited:
        type: boolean
      image_url:
        oneOf:
        - type: string
        - type: 
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      owner:
        "$ref": "#/definitions/User"
      invited_users:
        type: array
        items:
          "$ref": "#/definitions/User"
    required:
    - id
    - name
    - notice
    - is_invited
    - image_url
    - created_at
    - updated_at
    - owner
    - invited_users
  Food:
    type: object
    additionalProperties: false
    properties:
      id:
        type: integer
      name:
        type: string
      amount:
        type: number
      notice:
        type: string
      image_url:
        oneOf:
        - type: string
        - type: 
      expiration_date:
        type: string
        format: date
      needs_adding:
        type: boolean
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      unit:
        "$ref": "#/definitions/Unit"
      created_user:
        "$ref": "#/definitions/User"
      updated_user:
        "$ref": "#/definitions/User"
    required:
    - id
    - name
    - amount
    - notice
    - image_url
    - expiration_date
    - created_at
    - updated_at
    - unit
    - created_user
    - updated_user
  Version:
    type: object
    additionalProperties: false
    properties:
      id:
        type: integer
      item_id:
        type: integer
      event:
        type: string
      changes:
        type: object
      created_at:
        type: string
        format: date-time
      updated_user:
        oneOf:
        - "$ref": "#/definitions/User"
        - type: 
    required:
    - id
    - item_id
    - event
    - changes
    - created_at
    - updated_user
  Credential:
    type: object
    additionalProperties: false
    properties:
      jwt:
        type: string
      expires_at:
        type: string
        format: date-time
      user:
        "$ref": "#/definitions/User"
    required:
    - jwt
    - expires_at
    - user
  User:
    type: object
    additionalProperties: false
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      admin:
        type: boolean
      disabled:
        type: boolean
      provider:
        type: string
      avatar_url:
        oneOf:
        - type: string
        - type: 
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
    required:
    - id
    - name
    - email
    - admin
    - disabled
    - provider
    - avatar_url
    - created_at
    - updated_at
  Unit:
    type: object
    additionalProperties: false
    properties:
      id:
        type: integer
      label:
        type: string
      step:
        type: number
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      user:
        "$ref": "#/definitions/User"
    required:
    - id
    - label
    - step
    - created_at
    - updated_at
securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths:
  "/units":
    get:
      tags:
      - Units
      responses:
        200:
          schema:
            type: array
            items:
              "$ref": "#/definitions/Unit"
    post:
      tags:
      - Units
      parameters:
      - in: formData
        name: label
        type: string
      - in: formData
        name: step
        type: number
      responses:
        201:
          schema:
            "$ref": "#/definitions/Unit"
  "/units/{id}":
    get:
      tags:
      - Units
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      responses:
        200:
          schema:
            "$ref": "#/definitions/Unit"
    put:
      tags:
      - Units
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      - in: formData
        name: label
        type: string
      responses:
        200:
          schema:
            "$ref": "#/definitions/Unit"
    delete:
      tags:
      - Units
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      responses:
        204:
          description: No content
  "/users":
    post:
      tags:
      - Users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/xml
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          "$ref": "#/definitions/User"
      responses:
        default:
          description: successful operation
  "/foods":
    get:
      tags:
      - Foods
      responses:
        200:
          description: List of foods
          schema:
            type: array
            items:
              "$ref": "#/definitions/Food"
    post:
      tags:
      - Foods
      parameters:
      - in: formData
        name: name
        description: Food name
        type: string
        required: true
      - in: formData
        name: box_id
        description: Box ID that food is created into
        type: integer
        required: true
      responses:
        201:
          description: Created food
          schema:
            "$ref": "#/definitions/Food"
    put:
      tags:
      - Foods
      parameters:
      - in: formData
        name: name
        description: Food name
        type: string
      responses:
        204:
          description: Updated food
          schema:
            "$ref": "#/definitions/Food"
  "/foods/{id}":
    get:
      tags:
      - Foods
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      responses:
        200:
          description: Description of the food
          schema:
            "$ref": "#/definitions/Food"
    put:
      tags:
      - Foods
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      responses:
        200:
          description: Description of the food
          schema:
            "$ref": "#/definitions/Food"
    delete:
      tags:
      - Foods
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      responses:
        200:
          description: Description of the food
          schema:
            "$ref": "#/definitions/Food"
  "/foods/{id}/versions":
    get:
      tags:
      - Foods
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      responses:
        200:
          description: Past versions of the food
          schema:
            type: array
            items:
              "$ref": "#/definitions/Version"
  "/boxes":
    get:
      tags:
      - Boxes
      responses:
        200:
          description: List of box
          schema:
            type: array
            items:
              "$ref": "#/definitions/Box"
      security:
      - BearerAuth: []
    post:
      tags:
      - Boxes
      parameters:
      - in: formData
        name: name
        type: string
        required: true
      - in: formData
        name: notice
        type: string
      responses:
        201:
          description: Created box
          schema:
            "$ref": "#/definitions/Box"
      security:
      - BearerAuth: []
    put:
      tags:
      - Boxes
      parameters:
      - in: formData
        name: name
        type: string
        required: true
      - in: formData
        name: notice
        type: string
      responses:
        202:
          description: Created box
          schema:
            "$ref": "#/definitions/Box"
      security:
      - BearerAuth: []
  "/boxes/owns":
    get:
      tags:
      - Boxes
      responses:
        200:
          description: List of box
          schema:
            type: array
            items:
              "$ref": "#/definitions/Box"
      security:
      - BearerAuth: []
  "/boxes/invited":
    get:
      tags:
      - Boxes
      responses:
        200:
          description: List of box
          schema:
            type: array
            items:
              "$ref": "#/definitions/Box"
      security:
      - BearerAuth: []
  "/boxes/{id}":
    get:
      tags:
      - Boxes
      parameters:
      - in: path
        name: id
        type: string
        required: true
      responses:
        200:
          description: List of box
          schema:
            "$ref": "#/definitions/Box"
      security:
      - BearerAuth: []
    put:
      tags:
      - Boxes
      parameters:
      - in: path
        name: id
        type: string
        required: true
      responses:
        200:
          description: List of box
          schema:
            "$ref": "#/definitions/Box"
      security:
      - BearerAuth: []
    delete:
      tags:
      - Boxes
      parameters:
      - in: path
        name: id
        type: string
        required: true
      responses:
        204:
          description: Invalid username supplied
      security:
      - BearerAuth: []
  "/boxes/{id}/versions":
    get:
      tags:
      - Boxes
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      responses:
        200:
          description: List of box
          schema:
            type: array
            items:
              "$ref": "#/definitions/Version"
      security:
      - BearerAuth: []
  "/boxes/{id}/image":
    get:
      tags:
      - Boxes
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      responses:
        200:
          description: List of box
      security:
      - BearerAuth: []
  "/boxes/{id}/units":
    get:
      tags:
      - Boxes
      parameters:
      - in: path
        name: id
        type: string
        required: true
      responses:
        200:
          description: List of box
          schema:
            type: array
            items:
              "$ref": "#/definitions/Unit"
      security:
      - BearerAuth: []
  "/boxes/{id}/invite":
    post:
      tags:
      - Boxes
      parameters:
      - in: path
        name: id
        type: string
        required: true
      responses:
        200:
          description: List of box
          schema:
            "$ref": "#/definitions/Invitation"
      security:
      - BearerAuth: []
    delete:
      tags:
      - Boxes
      parameters:
      - in: path
        name: id
        type: string
        required: true
      responses:
        204:
          description: List of box
      security:
      - BearerAuth: []
  "/auth":
    post:
      tags:
      - Authentication
      responses:
        200:
          description: Success authorization
          schema:
            "$ref": "#/definitions/Credential"
